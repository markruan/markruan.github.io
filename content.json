{"meta":{"title":"爱·绮梦","subtitle":null,"description":null,"author":"Mark Ruan","url":"http://yoursite.com","root":"/"},"pages":[{"title":"tag","date":"2020-12-10T12:55:53.000Z","updated":"2020-12-10T12:55:53.380Z","comments":true,"path":"tag/index.html","permalink":"http://yoursite.com/tag/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-12-10T07:14:16.000Z","updated":"2020-12-10T07:14:16.402Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"study/Hexo 中 Markdown 特殊字符的处理方法","slug":"study/Hexo 中 Markdown 特殊字符的处理方法","date":"2020-12-14T12:24:18.800Z","updated":"2020-12-17T07:45:08.014Z","comments":true,"path":"2020/12/14/study/Hexo 中 Markdown 特殊字符的处理方法/","link":"","permalink":"http://yoursite.com/2020/12/14/study/Hexo%20%E4%B8%AD%20Markdown%20%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/","excerpt":"","text":"问题描述在 Hexo 搭建的博客中对文章进行编写，经常会用到一些特殊字符需要转译，比如 -、.、空格、制表符等等，在正常情况下可以使用 \\ 进行转译，但是有一些字符无法转译，使用后在执行 hexo server 命令的时候会报错。 报错信息： Unhandled rejection Template render error: (unknown path) [Line 7, Column 23] Error: Unable to call worldcount, which is undefined or falsey…… 解决方案报错的原因是，Hexo 编译时发生错误，可能是文章中存在特殊字符，如：{ [ ( ) ] } 等等。如下面这段代码： 在页面中： 1&#123;&#123; worldcount(post.content) &#125;&#125; 在 Markdown 中： 1&amp;#123;&amp;#123; worldcount&amp;#40;post.content&amp;#41; &amp;#125;&amp;#125; 在 Markdown 中使用 \\ 无法转译的字符需要使用字符的命名实体或十进制编码，如上面代码中。 注意：需要转义的字符只是文本中的特殊字符，代码块中的特殊字符无需转译或使用转译字符。 常见特殊字符 (所以编码使用时;前的空额取消) 特殊符号 命名实体 十进制编码 空格 &amp;nbsp ; &amp;#160 ; 全角空格 &emsp; &#12288; ‘ &amp;apos ; &amp;#39 ; “ &amp;quot ; &amp;#34 ; ( — &amp;#40 ; ) — &amp;#41 ; &lt; &amp;lt ; &amp;#60 ; &gt; &amp;gt ; &amp;#62 ; [ — &amp;#91 ; ] — &amp;#93 ; { — &amp;#123 ; } — &amp;#125 ; ´ &amp;acute ; &amp;#180 ; ° &amp;deg ; &amp;#176 ; ® &amp;reg ; &amp;#174 ; © &amp;copy ; &amp;#169 ; 常用数学转译字符对照表： 特殊符号 命名实体 十进制编码 ≤ &amp;le ; &amp;#8804 ; ≥ &amp;ge ; &amp;#8805 ; ≈ &amp;asymp ; &amp;#8773 ; ≠ &amp;ne ; &amp;#8800 ; ∩ &amp;cap ; &amp;#8745 ; ∪ &amp;cup ; &amp;#8746 ; ∠ &amp;ang ; &amp;#8736 ; ∞ &amp;infin ; &amp;#8734 ; ± &amp;plusmn ; &amp;#177 ; √ &amp;radic ; &amp;#8730 ; ∑ &amp;sum ; &amp;#8722 ; ∫ &amp;int ; &amp;#8747 ; Δ &amp;Delta ; &amp;#916 ; 常用希腊字母转译字符对照表： 特殊符号 命名实体 十进制编码 Φ &amp;Phi ; &#934; Ω &amp;Omega ; &#937; α &amp;alpha ; &#945; β &amp;beta ; &#946; γ &amp;gamma ; &#947; δ &amp;delta ; &amp;#948 ; ε &amp;epsilon ; &amp;#949 ; ζ &amp;zeta ; &amp;#950 ; η &amp;eta ; &amp;#951 ; θ &amp;theta ; &amp;#952 ; λ &amp;lambda ; &amp;#955 ; μ &amp;mu ; &amp;#956 ; ξ &amp;xi ; &amp;#958 ; π &amp;pi ; &amp;#960 ; ρ &amp;rho ; &amp;#961 ; σ &amp;sigma ; &amp;#963 ; φ &amp;phi ; &amp;#966 ; ψ &amp;psi ; &amp;#968 ; ω &amp;omega ; &amp;#969 ; ∂ &amp;part ; &amp;#8706 ; ∅ &amp;empty ; &amp;#8709 ; 原文出自：https://www.pandashen.com","categories":[{"name":"study","slug":"study","permalink":"http://yoursite.com/categories/study/"}],"tags":[]},{"title":"shopify/shopify产品页面数据获取","slug":"shopify/shopify产品页面数据获取","date":"2020-12-14T12:04:33.788Z","updated":"2020-12-14T12:12:11.655Z","comments":true,"path":"2020/12/14/shopify/shopify产品页面数据获取/","link":"","permalink":"http://yoursite.com/2020/12/14/shopify/shopify%E4%BA%A7%E5%93%81%E9%A1%B5%E9%9D%A2%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96/","excerpt":"","text":"获取产品数据获取标题1&#123;&#123; product.title &#125;&#125; 获取最低价和最高价1&#123;&#123; product.price_min | money &#125;&#125; - &#123;&#123; product.price_max | money &#125;&#125; 获取 variant （后面我将叫它为变体），并获取关联数据这里我先讲一下 我的选购逻辑，因为这里的代码数据应该如何获取与我的选购逻辑有关系。我的选购逻辑与速卖通的有点像，速卖通是有个选项可以绑定图片，这样用户可以更直观的知道他的选择。而为我的逻辑是通过选择图片进行选购，不一样的是我的图片可以通过选择属性进行筛选，而不是不同属性的图片是一样的，下面是速卖通的截图 获取 variant 和关联数据，图片，标题，ID这里我规定 多重属性 的 第一个option 是 image 第二个是 size，因为我的项目选项是固定的，可以这样做，当然你也可以写成灵活的，只是这样你需要做的工作量比较多而已 123456&#123;% for variant in product.variants %&#125; &#123;% assign id &#x3D; variant.id %&#125; &#123;% assign title &#x3D; variant.title %&#125; &#123;% assign image &#x3D; variant.image %&#125; &#123;% assign size &#x3D; variant.option2 %&#125;&#123;% endfor%&#125; 获取选项数据这里可以根据我根据我的项目需求进行获取，我的项目需求可以简单的认为只有 图片 和 尺寸图片上面已经有了，所以这里我只需要得到 size。这里是有条件，要求你在上传产品的时候设置多重属性的时候就要对应名称，我这里是 image 和 color。 1234&#x2F;&#x2F; 获取 size&#123;% for value in product.options_by_name[&#39;size&#39;].values %&#125; &lt;li&gt;&#123;&#123; value &#125;&#125;&lt;&#x2F;li&gt;&#123;% endfor %&#125; 数据绑定数据绑定还是比较简单的，讲获取到的数据通过 data- 绑定在dom上就好了，后面我们通过js来读取即可，可根据自己需要进行绑定 对于大部分人来说可能更加喜欢通过 js 渲染数据。这里给大家提供以下如何在js中获取产品数据的代码，如果你需要考虑SEO,那你就的主意一下，因为爬虫是无法读取js渲染的数据 123456&#x2F;&#x2F; 记得必须是在产品页面下才有效 需要访问得到 &#123;&#123; product &#125;&#125;&lt;script&gt; &#x2F;&#x2F; 获取 product 的json数据 let product &#x3D; &#123;&#125;; product.data &#x3D; &#123;&#123; product | json &#125;&#125;;&lt;&#x2F;script&gt;","categories":[{"name":"shopify","slug":"shopify","permalink":"http://yoursite.com/categories/shopify/"}],"tags":[]},{"title":"shopify/shopify 图片CDN 详解","slug":"shopify/shopify 图片CDN 详解","date":"2020-12-14T11:49:44.425Z","updated":"2020-12-14T12:23:45.767Z","comments":true,"path":"2020/12/14/shopify/shopify 图片CDN 详解/","link":"","permalink":"http://yoursite.com/2020/12/14/shopify/shopify%20%E5%9B%BE%E7%89%87CDN%20%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"对于刚入手shopify 的小白来说，shopify 图片是一个急需了解的点。对于大企业来说资源管理是必须优化到极致的，目前对于资源管理比较有效的方式是 CDN 资源管理。shopify 自然也会为它的资源搭建CDN服务，而对图片则做图片CDN，图片CDN与传统CDN的区别在于，它是专门为图片做优化的，通常包含缩放、格式转换等。你可以把它看成是一个API，通过传入尺寸、质量、格式等参数，获取到对应的图片内容。这也使得我们在使用上非常方便，适用于多种不同的场景。 下面我们则针对 shopify 图片CDN的使用做讲解 Shopify 图片的参数使用下面花括号里面使用的 [image 是指 shopify 的图片对象](https://shopify.dev/docs/themes/liquid/reference/objects/image） 图片尺寸参数您可以为图像的宽度和高度指定精确的像素尺寸，最大5760 x 5760 px。除非裁剪图像，否则图像的原始长宽比将保留。（无论您指定什么尺寸，都不能将图像的大小调整为大于其原始尺寸。如果大于原始尺寸则返回原始尺寸大下的图片） 固定尺寸根据设置的 宽高 返回对应尺寸的图片 格式 1&#123;&#123; image | img_url: &#39;&lt;宽&gt;x&lt;高&gt;&#39; &#125;&#125; 输入 1&#123;&#123; image | img_url: '720x720' &#125;&#125; CDN 1https://cdn.shopify.com/s/files/1/1183/1048/products/boat-shoes_720x720.jpeg 英文名称尺寸与固定尺寸一样的意义，只不过，值使用英文名称替代 英文名称 示例 返回尺寸 &lt;空&gt; &#123;&#123; image \\ img_url &#125;&#125; 100x100 small &#123;&#123;image \\ img_url : ‘small’ &#125;&#125; 100x100 medium &#123;&#123; image \\ img_url: ‘medium’ &#125;&#125; 240x240 large &#123;&#123; image \\ img_url: ‘large’ &#125;&#125; 480x480 master &#123;&#123; image \\ img_url: ‘master’ &#125;&#125; 原始尺寸 仅宽或高尺寸您只能指定宽度或高度，Shopify会根据原始图像的尺寸计算其他尺寸，并保持原始图像的长宽比： 例子 图片尺寸为 400x300 仅宽度 1&#123;&#123; image | img_url: '200x' &#125;&#125; //返回 图片尺寸为 200x150 仅高度 1&#123;&#123; image | img_url: 'x150' &#125;&#125; //返回 图片尺寸为 200x150 图片剪切参数 crop您可以指定crop参数以确保生成的图像的尺寸与请求的尺寸匹配。如果整个图像都不适合您要求的尺寸，则该crop参数指定要显示图像的哪一部分。有效选项包括：top、centent、bottom、left、right 列子 图片 宽高 为 100x300，（按竖直方式平分为三个，分别为 上中下） 1&#123;&#123; image | img_url: '100x100', crop: 'bottom' &#125;&#125; // 显示部分 为 下 示例原图 - 九宫格尺寸：900x900 1、不带 crop，则根据固定尺寸原则，返回原始尺寸输入 1&#123;&#123; image | img_url: '900x300' &#125;&#125; CDN 1&#x2F;&#x2F;cdn.shopify.com&#x2F;s&#x2F;files&#x2F;1&#x2F;0449&#x2F;5491&#x2F;0874&#x2F;files&#x2F;sudoku_900x300.jpg 效果图 2、带 crop， 图片不符合尺寸时，则根据crop指定的位置，截取要显示的部分输入 123456&#123;&#123; image | img_url: '300x100', crop: 'top' &#125;&#125; &#123;&#123; image | img_url: '300x100', crop: 'center'&#125;&#125; &#123;&#123; image | img_url: '300x100', crop: 'bottom'&#125;&#125; &#123;&#123; image | img_url: '100x300', crop: 'left' &#125;&#125; &#123;&#123; image | img_url: '100x300', crop: 'center'&#125;&#125; &#123;&#123; image | img_url: '100x300', crop: 'right'&#125;&#125; CDN 123456&#x2F;&#x2F;cdn.shopify.com&#x2F;s&#x2F;files&#x2F;1&#x2F;0449&#x2F;5491&#x2F;0874&#x2F;files&#x2F;sudoku_300x100_crop_top.jpg&#x2F;&#x2F;cdn.shopify.com&#x2F;s&#x2F;files&#x2F;1&#x2F;0449&#x2F;5491&#x2F;0874&#x2F;files&#x2F;sudoku_300x100_crop_center.jpg&#x2F;&#x2F;cdn.shopify.com&#x2F;s&#x2F;files&#x2F;1&#x2F;0449&#x2F;5491&#x2F;0874&#x2F;files&#x2F;sudoku_300x100_crop_bottom.jpg&#x2F;&#x2F;cdn.shopify.com&#x2F;s&#x2F;files&#x2F;1&#x2F;0449&#x2F;5491&#x2F;0874&#x2F;files&#x2F;sudoku_100x300_crop_left.jpg&#x2F;&#x2F;cdn.shopify.com&#x2F;s&#x2F;files&#x2F;1&#x2F;0449&#x2F;5491&#x2F;0874&#x2F;files&#x2F;sudoku_100x300_crop_cen300x150&#x2F;&#x2F;cdn.shopify.com&#x2F;s&#x2F;files&#x2F;1&#x2F;0449&#x2F;5491&#x2F;0874&#x2F;files&#x2F;sudoku_100x300_crop_right.jpg 图片 300x100 top 300x100 center 300x100 right 100x300 left 100x300 center 100x300 right 图片比例（倍数）参数 scale谷歌翻译 为 亲密度，但是从效果来看我觉得翻译为比例或者倍数更加恰当 该scale参数使您可以指定图像的像素密度。（返回img_url设置的尺寸的scale倍数的图片尺寸，这里我可能解释的不是很清楚，我们还是直接看示例） 示例输入 12&#123;&#123; image | img_url: '150x150' &#125;&#125;&#123;&#123; image | img_url: '150x150', scale: 2 &#125;&#125; CDN 12//cdn.shopify.com/s/files/1/0449/5491/0874/files/sudoku_150x150.jpg//cdn.shopify.com/s/files/1/0449/5491/0874/files/sudoku_150x150@2x.jpg 效果图 &#123;&#123; image \\ img_url: ‘150x150’ &#125;&#125; &#123;&#123; image \\ img_url: ‘150x150’, scale: 2 &#125;&#125; 图片尺寸：150x150 图片尺寸：300x300 根据上述例子，相信你应该能明白 scale 的作用了 图片格式参数 format该format参数使您可以指定要用于显示图像的文件格式。有效选项包括：jpg、pjpg(渐进式JPEG。浏览器以逐渐提高的质量加载全尺寸的渐进式JPEG，而不是像传统JPEG那样从上到下加载完整质量的图像。) Shopify可以为您执行以下格式转换：PNG 转 JPG、PNG 转 PJPG、JPG 转 PJPG 示例输入 123&#123;&#123; image | img_url, format: 'jpg' &#125;&#125; &#123;&#123; image | img_url, format: 'pjpg' &#125;&#125;&#123;&#123; image | img_url, format: 'pjpg' &#125;&#125; CDN 123456/* PNG 转 JPG */https://cdn.shopify.com/s/files/1/0449/5491/0874/files/baymax_100x100.png.jpg /* PNG 转 PJPG */https://cdn.shopify.com/s/files/1/0449/5491/0874/files/baymax_100x100.progressive.png.jpg/* JPG 转 PJPG */https://cdn.shopify.com/s/files/1/0449/5491/0874/files/baymax_100x100.progressive.jpg 效果图 PNG 转 JPG PNG 转 PJPG JPG 转 PJPG &#123;&#123; image \\ img_url, format: ‘jpg’ &#125;&#125;&#125; &#123;&#123;image \\ img_url, format: ‘pjpg’ &#125;&#125; &#123;&#123;image \\ img_url, format: ‘pjpg’ &#125;&#125;","categories":[{"name":"shopify","slug":"shopify","permalink":"http://yoursite.com/categories/shopify/"}],"tags":[]},{"title":"study/particles.js","slug":"study/particles.js","date":"2020-12-13T12:49:50.235Z","updated":"2020-12-14T11:31:15.536Z","comments":true,"path":"2020/12/13/study/particles.js/","link":"","permalink":"http://yoursite.com/2020/12/13/study/particles.js/","excerpt":"","text":"particles.js学习 今天突发奇想优化下主题，想起了之前看过炫酷的星云效果，就搜索了下… 效果见主页 InstallationTo install particles.js you can download the latest version, install it via npm: 1npm install particlesjs —-save or use the CDN: 1https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;particlesjs&#x2F;2.2.2&#x2F;particles.min.js Usage123456&lt;body&gt; … &lt;script src=\"path/to/particles.min.js\"&gt;&lt;/script&gt;&lt;/body&gt; Add a canvas element to your markup (it should be the last element): 1234567891011&lt;body&gt; … &lt;canvas class=\"background\"&gt;&lt;/canvas&gt; &lt;script src=\"path/to/particles.min.js\"&gt;&lt;/script&gt;&lt;/body&gt; And Initialize the plugin on DOM ready: 1234567window.onload = function() &#123; Particles. init (&#123; selector: '.background' &#125;);&#125;; Options Option Type Default Description selector string - Required: CSS selector of your canvas element maxParticles integer 100 Optional: Maximum amount of particles sizeVariations integer 3 Optional: Amount of size variations speed integer 0.5 Optional: Movement speed of the particles color string or string[] #000000 Optional: Color(s) of the particles and connecting lines minDistance integer 120 Optional: Distance in px for connecting lines connectParticles boolean false Optional: true/false if connecting lines should be drawn responsive array null Optional: Array of objects containing breakpoints and options Responsive optionWith the responsive option, you can add or override options for different screen sizes: 12345678910111213141516171819202122232425262728Particles. init (&#123; // normal options selector: '.background', maxParticles:450, // options for breakpoints responsive: [ &#123; breakpoint: 768, options: &#123; maxParticles: 200, color: '#48F2E3', connectParticles:false &#125; &#125;, &#123; breakpoint:425, options: &#123; maxParticles: 100, connectParticles: true &#125; &#125;, &#123; breakpoint: 320, options: &#123; maxParticles: 0 // disables particles.js &#125; &#125; ]&#125;); Methods Method Description pauseAnimation Pauses/stops the particle animation resumeAnimation Continues the particle animation Use the public methods 1234567891011var particles = Particles.init(&#123;// options&#125;);// E.g. gets called on a button clickfunction pause () &#123; particles. pauseAnimation ();&#125;// E.g. gets called on a button clickfunction resume () &#123; particles. resumeAnimation ();&#125;","categories":[{"name":"study","slug":"study","permalink":"http://yoursite.com/categories/study/"}],"tags":[]},{"title":"shopify/shopify调用配置信息","slug":"shopify/shopify调用配置信息","date":"2020-12-12T10:18:34.402Z","updated":"2020-12-12T14:19:53.261Z","comments":true,"path":"2020/12/12/shopify/shopify调用配置信息/","link":"","permalink":"http://yoursite.com/2020/12/12/shopify/shopify%E8%B0%83%E7%94%A8%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/","excerpt":"","text":"调用配置1234567891011121314151617181920212223要调用模板中的配置信息，需要使用 liquid 语言。可以使用&#123;%%&#125;逻辑标签和&#123;&#123;&#125;&#125;显示标签。在这两种标签里，都可以使用settings.id，其中id就是配置中定义的属性。比如配置文件里是这样写的：[&#123; \"name\" : \"颜色\", \"settings\" : [ &#123; \"type\": \"color\", \"id\": \"color_background\", \"label\": \"背景颜色\", \"default\": \"#e5e5e5\", \"info\" : \"这个将调整背景颜色\" &#125;, &#123; \"type\": \"color\", \"id\": \"color_body_text\", \"label\": \"内容文字颜色\", \"default\": \"#2980b9\", \"info\" : \"这个将调整内容文字颜色\" &#125; ] &#125;] 你可以这样调用背景颜色： 1&#123;&#123; settings.color_background &#125;&#125; 常规配置类型常规配置类型包括：text, textarea, image, radio, select, checkbox。每种类型都允许用户选择来修改模板。这些配置用一组liquid标签来调用。 12345678910&#123;&#123;&#125;&#125; &#x2F;&#x2F;将会把信息显示在页面上&#123;&#123; settings.your_id &#125;&#125;&#123;%%&#125;可以把配置信息用于逻辑处理上。 &#123;% if settings.product_order &#x3D;&#x3D; true %&#125; &lt;p&gt;可以下单!&lt;&#x2F;p&gt; &#123;% else %&#125; &lt;p&gt;不能下单 :(&lt;&#x2F;p&gt; &#123;% endif %&#125; 特殊设置类型特殊设置类型包括：color, font, collection, product, blog, page, link_list, snippet。要调用他们，比常规配置稍微复杂一些。 Color和Font12345678910color和font和上面的调用方式相同，如果你在页面上直接调用，那么它将在页面上显示16进制，然而对于我们来说并没有什么卵用，我们需要在样式表中调用这个才有意义，比如将我们的sass文件保存成application.scss.liquid，就可以使用liquid语法来调用它。body&#123; background-color: #&#123;&#39;&#123;&#123; settings.color_background &#125;&#125;&#39;&#125; &#125; 注意：这里用#{‘’}包裹。 同样，字体也可以用这种方式调用： 123body &#123; font-family: #&#123;&#39;&#123;&#123; settings.header_font &#125;&#125;&#39;&#125;; &#125; Collectionscollections的调用方式会更复杂一些，首先要注意的是，当你将设置的类型为Collections是，选择面板中将显示用户的collections下拉列表，其中包括已经在商店中定义的所有Collections。这意味着必须至少已经定义了2个集合。其次，需要知道shopify都有哪些特殊配置的标签，这里有个表 http://cheat.markdunkley.com/，可以方便查看。 比如，我们在这里找到了collection.liquid部分，上面有用什么标签全局访问。 1collections[&#39;the-handle&#39;].variable 这里，the-handle是集合的名称，或者说是集合的slug。在settings_schema.json配置文件中，id的名称将定于这个属性。比如： 123456789101112[ &#123; \"name\": \"Collection\", \"settings\" : [ &#123; \"type\": \"collection\", \"id\": \"feature_collection\", \"label\": \"Feature collection\" &#125; ] &#125;] 那么就这样调用： 1&#123;&#123; collections[settings.feature_collection] &#125;&#125; 但是，上面的代码只会显示为CollectionDrop。 为了获得有意义的东西，需要选择集合的属性（可在http://cheat.markdunkley.com/上获得），例如标题或产品。 1&#123;&#123; collections[settings.feature_collection].title &#125;&#125; 您可能还想访问该集合中每个产品的信息。 这可以通过引用集合上的products属性然后循环遍历这些来轻松实现。 123&#123;% for product in collections[settings.feature_collection].products %&#125; &lt;p&gt;&#123;&#123; product.title &#125;&#125; | &#123;&#123; product.price &#125;&#125;&lt;/p&gt; &#123;% endfor %&#125; 通过liquid循环语句，可以把集合中的每个产品遍历出来，并显示产品的标题和价格。 Products产品和集合的使用方式类似，查一下表，看看如何调用这个products。 1all_products[&#39;the-handle&#39;].variable 注意这里是all_products，而不是products。 所以，这样调用产品的标题和价格： 1&#123;&#123; all_products[settings.feature_product].title &#125;&#125; | &#123;&#123; all_products[settings.feature_product].price &#125;&#125; 如果要调用产品的头图，这样来。 1&lt;img src&#x3D;&quot;&#123;&#123; all_products[settings.feature_product].featured_image | img_url: &#39;small&#39; &#125;&#125;&quot; alt&#x3D;&quot;&#123;&#123; a","categories":[{"name":"shopify","slug":"shopify","permalink":"http://yoursite.com/categories/shopify/"}],"tags":[]},{"title":"shopify/shopify模板开发学习-自定义配置文件","slug":"shopify/shopify模板开发学习-自定义配置文件","date":"2020-12-12T08:35:47.506Z","updated":"2020-12-14T11:46:14.088Z","comments":true,"path":"2020/12/12/shopify/shopify模板开发学习-自定义配置文件/","link":"","permalink":"http://yoursite.com/2020/12/12/shopify/shopify%E6%A8%A1%E6%9D%BF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0-%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/","excerpt":"","text":"在创建主题时，可以为客户预留一些自定义的配置，是Shopify主题模板常用的做法。Shopify使用settings_schema.json文件提供了这个自定义配置的方式。 在Shopify主题的config目录中，在此文件中定义一些对象属性，就可以实现自定义的配置选项。当你选择在线商店 》 模板 》自定义按钮，就可以看到控制面板中这些选项。 配置文件的文件格式settings_schema.json文件，本身是个JSON文件，那么他需要遵守JSON文件规范，这里所有的数据都用[]括起来。在此范围内，你可以将相关选项组合在一起。每个分组都有一个名称，然后是定义这个组的配置。比如： 1234567[ &#123; \"name\" : \"颜色\", \"settings\" : [ ] &#125;]123456 然后，每个选项都是设置数组中的一个对象。 像这样的东西： 12345678910111213141516171819202122232425262728293031323334353637383940[ &#123; \"name\": \"Shopify119\", \"theme_name\": \"Shopify119 theme\", \"theme_version\": \"1.0.0\", \"theme_author\": \"Leo\", \"theme_documentation_url\": \"https://shopify119.blog.csdn.net\", \"theme_support_url\": \"https://shopify119.blog.csdn.net\" &#125;, &#123; \"name\" : \"颜色\", \"settings\" : [ &#123; \"type\": \"color\", \"id\": \"color_background\", \"label\": \"背景颜色\", \"default\": \"#e5e5e5\", \"info\" : \"这个将调整背景颜色\" &#125;, &#123; \"type\": \"color\", \"id\": \"color_body_text\", \"label\": \"内容文字颜色\", \"default\": \"#2980b9\", \"info\" : \"这个将调整内容文字颜色\" &#125; ] &#125;, &#123; \"name\": \"Logo\", \"settings\": [ &#123; \"type\": \"image\", \"id\": \"logo.png\", \"label\": \"Logo\", \"info\": \"这里可以改变店铺的Logo\" &#125; ] &#125;] 上面的例子中，在自定义设置的侧栏上，你可以看到标签“颜色”，当你单击他时，可以选择设置背景颜色和内容文字颜色；选择Logo可以更改店铺的Logo。 配置文件的属性每个设置都有5个属性：type、id、label、default、info 类型 是否必填 描述 type 必填 定义选项所需的输入类型 id 必填 id必须唯一，这将在主题中引用它 label 必填 向用户描述了该选项的用途，可以用中文 placeholder 可选 输入的占位符文本的值。这仅适用于基于文本的设置类型。 default 可选 该选项的默认值 info 可选 为用户提供该选项的详细使用信息 常规设置类型下表描述了允许的常规输入类型，每个值在type属性中设置。 值 说明 text 允许用户输入单行文本字段 textarea 允许用户输入多行文本字段 image 允许用户上传图片 radio 允许用户使用单选按钮 select 允许用户从下拉列表中进行选择 checkbox 允许用户选中一个框，返回true或false值 image type需要注意的是，用这种方式上传的图片将保存在模板的assets文件夹中。该文件使用id中定义的名称和格式进行保存。所以，即使上传的是.jpg文件，但是id定义的是logo.png，图片也将会保存为.png文件。 radio和select type由于radio和select有多个值可提供选择，因此还需要设置额外的属性。比如： 1234567891011&#123; \"type\": \"radio\", \"id\": \"id\", \"label\": \"Text\", \"options\": [ &#123; \"value\": \"one\", \"label\": \"Radio One\" &#125;, &#123; \"value\": \"two\", \"label\": \"Radio Two\" &#125; ], \"default\": \"one\", \"info\": \"Text\"&#125; 特殊设置类型特殊设置类型的定义访问和常规设置类型相似，不同之处在于这些设置，将为用户提供内置或特定的选择信息。比如：产品类型是下拉列表，但只允许用户从已经在商店中定义的产品类型中进行选择。 值 说明 color 允许用户使用颜色选择器窗口小部件选择颜色 font 允许用户从可用字体列表中进行选择 collection 允许用户选择商店中可用的产品系列 product 允许用户选择商店中可用的产品 blog 允许用户从商店中设置的博客列表中进行选择 link_list 允许用户从可用菜单中进行选择 page 允许用户选择商店中定义的特定页面 snippets 允许用户选择主题中可用的特定代码段 Blog TypeShopify内置了博客，你可以添加博客文章。还可以把这些博客文章添加到不同的博客中。blog type设置下拉列表允许你选择要用于改设置的博客。 Snippet Type代码片段在模板中的snippets目录里面定义。 信息设置Shopify还允许将创建主题的作者信息放入侧边栏中，它们只有3个属性：type, content, info 类型 是否必填 描述 type 必填 定义选项所需的输入类型。 对于侧边栏设置，这只能是标题或段落 content 必填 文本内容 info 可选 向用户提供有关该选项的其他信息。 在模板中调用配置信息现在已经可以创建设置信息了，但是如何在实际的模板中调用并使用它们？这将是下篇文章的内容。","categories":[{"name":"shopify","slug":"shopify","permalink":"http://yoursite.com/categories/shopify/"}],"tags":[]},{"title":"shopify/如何创建一个Shopify模版本地开发环境","slug":"shopify/如何创建一个Shopify模版本地开发环境","date":"2020-12-03T10:30:41.533Z","updated":"2020-12-12T14:19:53.261Z","comments":true,"path":"2020/12/03/shopify/如何创建一个Shopify模版本地开发环境/","link":"","permalink":"http://yoursite.com/2020/12/03/shopify/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAShopify%E6%A8%A1%E7%89%88%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/","excerpt":"","text":"安装主题套件首先，转到themekit下载主题套件。 macOS安装使用homebrew安装themekiit. 12brew tap shopify&#x2F;shopifybrew install themekit Windows Chocolatey安装首先安装Chocolatey，然后通过以下命令安装themekit。 1choco install themekit Linux安装如果是Linux系统，则可以使用以下脚本安装themekit。 1curl -s https:&#x2F;&#x2F;shopify.github.io&#x2F;themekit&#x2F;scripts&#x2F;install.py | sudo python 安装完毕之后运行theme，如果显示下图信息则安装成功。 链接到商店要想连接到商店拥有主题的读写权限，首先得建立私人应用将API秘钥添加到我们的配置中。 请登录Shopify后台，然后创建一个私人应用程序。 Shopify管理员 &gt; Apps &gt; 单击Manage private apps &gt; 单击Create a new private app创建应用 然后填写信息，并将Theme templates and theme assets权限设置为读写访问权限并保存，页面刷新之后复制密码，后面步骤用得到。 下载需要修改的模板接下来，我们需要将主题下载到本地环境中。要下载模板，首先需要知道模板的ID。获取ID的最简单方法是使用get命令，如下所示： theme get –list -p=上一步复制的密码 -s=http://you-store.myshopify.com 然后，记下模板ID，运行以下命令从shopify下载主题： theme get -p=上一步复制的密码 -s=http://you-store.myshopify.com -t=your-theme-id 编辑模板我们可以编辑这些本地文件，然后运行theme watch。这将监视模板文件中的更改，当检测到文件被修改时，Theme Kit将自动将新版本上载到Shopify，因此您可以立即查看编辑后的模板样式。 当我们对theme.scss.liquid文件进行了一些更改，您将在终端上看到此输出 要上传特定文件，请运行theme upload 。要删除特定文件，请运行theme remove 。您可以通过运行查找所有命令的列表theme help。您可以通过运行获取有关命令的更多信息theme help 实时预览没有人喜欢编辑一次然后手动刷新一次页面。下面我们将使用Prepros来达到实时预览的功能。 首先下载Prepros并安装 将主题添加为项目 只需将整个目录拖到Prepros中，即可将主题作为项目添加到Prepros。 监视.liquid文件应将.liquid文件添加到Prepros将要监视的文件类型列表中。默认情况下是不会监视它们的，因为Prepros不会编译Liquid。 要将.liquid文件添加到监视列表，请右键任意.liquid文件，然后选择“ Watch .liquid files”。 将实时预览链接到店铺下一步是设置实时预览的URL。也就是将Prepros与Shopify商店链接起来并实现实时重载的功能。 具体设置如下图： 设置重新加载的延迟最后，您需要在Prepros中设置延迟。延迟的原因是让Theme Kit有时间观察到更改，并将更改与Shopify的服务器同步。 具体设置如下图： 进行修改并实时预览现在，您已经设置了实时预览，按Ctrl+L在浏览器中打开就能看到。","categories":[{"name":"shopify","slug":"shopify","permalink":"http://yoursite.com/categories/shopify/"}],"tags":[]},{"title":"study/X3 photo gallery 授权破解","slug":"study/X3 photo gallery 授权破解","date":"2020-11-29T10:39:33.151Z","updated":"2020-12-12T14:19:53.262Z","comments":true,"path":"2020/11/29/study/X3 photo gallery 授权破解/","link":"","permalink":"http://yoursite.com/2020/11/29/study/X3%20photo%20gallery%20%E6%8E%88%E6%9D%83%E7%A0%B4%E8%A7%A3/","excerpt":"","text":"X3 photo gallery 另类破解这个软件用了很久，之前也用过破解版，但升级后接失效了，今天闲来无事，试着破解，搜索关键字，查看源码，自以为很简单，直接注销代码，看了下，底部链接是消失了，但是后来，点击上面的目录时才发现，会跳出授权经过…. 后来又试了另外的方法，终于成功了。就是把授权的文字直接把字体颜色改成背景色。具体方法如下： 1.zai 源文件 templates 下76文件夹（因为通过搜索发现授权这行代码的class”x3-footer-link”在这个文件） 2.随便找一行代码，我是在131行 加入如下代码： 1echo &quot;&lt;style&gt;.footer .x3-footer-link,a &#123;color:#e2d6d2&#125;&lt;&#x2F;style&gt;&quot;; 完成。 方法很笨，但效果达到","categories":[{"name":"study","slug":"study","permalink":"http://yoursite.com/categories/study/"}],"tags":[{"name":"采坑","slug":"采坑","permalink":"http://yoursite.com/tags/%E9%87%87%E5%9D%91/"}]},{"title":"shopify/为什么你的Shopify店铺没有成功","slug":"shopify/为什么你的Shopify店铺没有成功","date":"2020-11-07T11:20:39.692Z","updated":"2020-12-12T14:19:53.261Z","comments":true,"path":"2020/11/07/shopify/为什么你的Shopify店铺没有成功/","link":"","permalink":"http://yoursite.com/2020/11/07/shopify/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E7%9A%84Shopify%E5%BA%97%E9%93%BA%E6%B2%A1%E6%9C%89%E6%88%90%E5%8A%9F/","excerpt":"","text":"为什么你的Shopify店铺没有成功？关于Shopify的各种讨论真是非常热烈！ 现实是99%的Shopify店铺创建者都未能实现一夜暴富的美梦，这与很多Shopify大师所宣传的情况不符。那么如何避免重蹈99%的失败者的覆辙而加入1%的成功者行列？本文将给出建议。 01 选择有特色的Niche 首先是Niche，字母N代表的是Niche，无论做Shopify还是任何电商都首先要考虑要选择什么样的细分市场，简言之就是你要选定要售卖的产品。 社交媒体营销也遵循20%的工作决定80%的成果的原则。99%的人的错误在于跟风，利用各种分析手段得出的Niche结论是一个无数店铺都在售卖的产品。 举个具体例子来说，像狗项圈。人们或者说大多数人不会从Shopify商店或者Facebook广告购买通用产品，就像你不会从Facebook广告上购买厕纸。 你应该做的是在搜索Niche时，利用搜索引擎的自动填充词条功能找灵感。比如在通用产品 dog collar后面加空格a，从以下自动生成的词条中选一个做Niche。 像dog collar army就不错，你可以用Facebook广告测试一下army风格的狗项圈，包括以一些历史上有名的将军为灵感的狗项圈，都是很不错的Niche。 或者dog collar后面加空格b，c，直到你找到满意的Niche， 再举个例子，像earrings耳饰，不要选择通用产品earrings，而是利用我们上面讲的方法从搜索引擎自动填充的词条中找灵感。 比如earrings animal搜索出来的动物形状的耳饰就是很好的Niche。设想一下如果Facebook用户中有即将过生日的，她的老公说不定就想买这样一副耳饰送她做生日礼物。 相反如果选择狗项圈、耳饰这样的通用产品，那么不大可能有人会从Facebook广告购买这些产品。 创建你的Shopify店铺前就要想到如何精准定位受众，找到目标顾客群体。因此你的Niche千万不要选一些通用的商品。 02 Shopify店铺也需要实实在在的经营 99%的人有Shopify店铺可以让人一夜暴富的错误想法。这些人认为自己可以在一天或者一周之内实现从对Shopify一无所知到成功创建自己的电商事业。 而他们所不知道的是，成功的电商企业每天会测试成百上千的产品，改变着店铺的各种设置，总结哪些是成功的产品哪些是不成功的产品；像所有商业活动一样，创建成功的电商企业也需要大量的时间投入，做大量的工作和一定的资金投入。 不要以为仅仅用Oberlo导入商品到你的Shopify店铺，就可以坐等成功Dropshipping，成为下一个一夜暴富的百万富翁。你需要做大量实实在在的工作，例如创建邮件清单、与你的顾客建立良好的关系、二次定位顾客、向老顾客发送优惠券等等。 03 失败一次就放弃 很多人在店铺中放了一共不到10个商品，为每个商品创建了广告组，没有一个商品成功销售，然后就放弃了Shopify店铺。 无论线上线下，决定一个企业家能否成功的关键因素在于其成功的意愿有多强烈。 很多人可能会花费100刀、200刀或者500刀，创建Shopify店铺，投放Facebook广告，但是都不奏效，于是就放弃了。可能你只需要一个成功的商品。 而且你不知道电商行业是最具有滚雪球效应的，一旦有了突破你很快会面临商品脱销的窘境。99%的人在成功卖出第一个商品前就放弃了。 04 工作量黄金分配比例 我们20%的活动决定着我们80%的成果，对于Shopify店铺来说那些是我们工作的重点呢？下面我从Shopify店铺三项主要工作内容为你分析工作量应该如何分配: ■ 20%的工作量花在创建店铺；（以我自己为例，我对Shopify店铺的创建很熟悉，对Facebook广告的投放也很熟悉，还有丰富的电商销售经验。我通常花一天时间创建一个Shopify店铺。） ■ 30%的工作量用于选择Niche和商品； ■ 51%的工作量用于市场营销（我故意强调超过一半的工作量）； 05 分清主次，把时间花在有产出的事情上 在创建Shopify店铺之前，先要确定你的Niche和商品。否则你可能花费了大量的时间和金钱创建了Shopify店铺而没有任何销售。你要把时间花在测试商品和广告定位上，这两项工作关乎店铺盈利，而不要把大量时间花在创建吸引人的Twitter或者Pinterest账号上。 以上几点就是99%的人失败的原因分析，希望我上面给出的建议能帮助你早日加入1%的成功者行列！","categories":[{"name":"shopify","slug":"shopify","permalink":"http://yoursite.com/categories/shopify/"}],"tags":[]},{"title":"study/typora使用","slug":"study/typora使用","date":"2020-11-07T02:02:05.754Z","updated":"2020-12-12T14:19:53.262Z","comments":true,"path":"2020/11/07/study/typora使用/","link":"","permalink":"http://yoursite.com/2020/11/07/study/typora%E4%BD%BF%E7%94%A8/","excerpt":"","text":"Typora介绍Typora是一款免费的轻量级Markdown编辑器，它没有Mou，Haroopad等Markdown编辑器那么大名鼎鼎，但算是较为小众的一款产品。 Typora作为一款离线Markdown无疑是非常棒的， 如果作为笔记工具的话，推荐你使用 cmd Markdown，因人而异。 下载地址：Typora @TOC 标题#一阶标题 （快捷键Ctrl+1） ##二阶标题 （快捷键Ctrl+2） ###三阶标题 （快捷键Ctrl+3） ####四阶标题 （快捷键Ctrl+4） #####五阶标题 （快捷键Ctrl+5） ######六阶标题 （快捷键Ctrl+6） 如何生成目录12345678910111213@[TOC]目录在文章开始地方输入[toc]，即可在对应位置插入目录@[TOC]目录以下不用写，直接写@[TOC](目录)即可自动获到目录中#一阶标题 （快捷键Ctrl+1）##二阶标题 （快捷键Ctrl+2）###三阶标题 （快捷键Ctrl+3）####四阶标题 （快捷键Ctrl+4）#####五阶标题 （快捷键Ctrl+5）######六阶标题 （快捷键Ctrl+6）注：凡是文章标题带有#（1-n个）的都会被捕获到目录中。 文本居中这是要居中的文本内容\\ 注：Typora目前并不会直接预览居中效果——相应的效果只有输出文本的时候才会显现。 下划线下划线使用格式 下划线的内容&lt;\\u&gt; 或者快捷键Ctrl+U 下划线在Typora显示形式是 这就是我亲测的下划线 删除线删除线使用格式：~~ 删除线的内容 字体加粗前面某个字段使用两个，\\加粗字体* 或者快捷键Ctrl+B 字体倾斜使用一个”星“，字体倾斜了 或者快捷键Ctrl+I 图片的插入直接拖你想要图片进来即可 超链接 使用快捷键Ctrl+K 使用2个反斜杠””，[百度][https://www.baidu.com/] 百度一下 注：按住Ctrl键+点击上面链接就可以直接访问该链接 代码区域三个反引号个（`）+编程语言即可 123&#x2F;&#x2F;设置线程名字thread.setName(&quot;线程1&quot;); thread1.setName(&quot;线程2&quot;); 表格的使用第一种：快捷键Ctrl+T 第二种：|ID|name|age|回车即可 学号姓名年龄20200506MarkerHunJava35 任务列表- [ ] 文字 （注：注意用空格隔开） [x] Java [x] 大数据 [ ] 人工智能 [ ] 机器学习 有序无序列表创建无序列 :+ 、- 、* （后面加空格） 多行无序列表: Java 容器 HashMap 有序列表:(1.)空格 Java Biodata 多行有序列表： 12341. Java2. Biodata 1. Java 2. Biodata 水平分割线1***或者- - - 引用的使用格式1&gt;+空格 表情1:单词 数学表达式Typora支持加入用LaTeX写成的数学公式，并且在软件界面下用MathJax直接渲染，数学公式分为两种参考Mathpix Snip 行内公式 $ ... $ 行间公式 $$ ... $$,（或者$$+回车）注：行间公式形式是将数学式插在文本行之间（多行公式、公式组和微积分方程等复杂的数学式都是采用行间） 注：行内公式形式是将数学式插入文本行之内（适合编写简 短的数学式） 如：将公式插入到本行内，符号：$公式内容$，$xyz$或“$$”+回车即可 #### 1、上标、下标、求和、括号、分式、根号 语法：行内公式输入在两个$$之间，行外公公式$$内容公式$$或$$+回车即可输入。 2、基本运算符 3、三角函数、指数、对数 4、高等数学相关运算符 6、希腊字母 甘特图12345678910&#96;&#96;&#96;mermaid gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section 现有任务 已完成 :done, des1, 2019-09-02,220-01-20 进行中 :active, des2, 2020-05-06, 3d 计划一 : des3, after des2, 5d 计划二 : des4, after des3, 5d &#96;&#96;&#96; Mermaid流程图12345678&#96;&#96;&#96;mermaid graph LR graph LR A[老鹰] -- 吃 --&gt; B((小鸡)) A -- 吃 --&gt; C(蛇) B -- 吃--&gt; D&#123;虫&#125; C --&gt; D &#96;&#96;&#96; 更多参考文档 Flowchart流程图","categories":[{"name":"study","slug":"study","permalink":"http://yoursite.com/categories/study/"}],"tags":[]},{"title":"Vue/解决跨域","slug":"Vue/解决跨域","date":"2020-11-06T12:21:26.710Z","updated":"2020-12-12T14:19:53.261Z","comments":true,"path":"2020/11/06/Vue/解决跨域/","link":"","permalink":"http://yoursite.com/2020/11/06/Vue/%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F/","excerpt":"","text":"生产环境和开发环境一次解决跨域问题在config 文件夹里面新建一个 api.config.js 配置文件 1234const isPro = Object.is(process.env.NODE_ENV, 'production')const baseUrl=isPro ? 'https://api.iqimeng.com' : 'api/'export default baseUrl; 然后在main.js 里面引入,这样可以保证动态的匹配生产和开发的定义前缀1234567import apiConfig from '../config/api.config'import Axios from 'axios'import VueAxios from 'vue-axios'Vue.use(VueAxios, Axios)Axios.defaults.baseURL = apiConfig","categories":[{"name":"Vue","slug":"Vue","permalink":"http://yoursite.com/categories/Vue/"}],"tags":[{"name":"采坑","slug":"采坑","permalink":"http://yoursite.com/tags/%E9%87%87%E5%9D%91/"}]},{"title":"值得纪念的一天","slug":"值得纪念的一天","date":"2020-11-06T11:32:09.615Z","updated":"2020-12-10T07:20:52.162Z","comments":true,"path":"2020/11/06/值得纪念的一天/","link":"","permalink":"http://yoursite.com/2020/11/06/%E5%80%BC%E5%BE%97%E7%BA%AA%E5%BF%B5%E7%9A%84%E4%B8%80%E5%A4%A9/","excerpt":"","text":"原来信心满满，憧憬各种各样的结果，也做好的面对挑战和无尽的压力，但事实却事与愿违，向前一步可能会很难，但也不想这样就看到尽头，命运真的会给我们开玩笑，好吧，既然这样那我就在这条路上一往无前 加油！！","categories":[],"tags":[]},{"title":"Vue/vue中使用H5的audio","slug":"Vue/vue中使用H5的audio","date":"2020-11-06T05:26:47.649Z","updated":"2020-12-12T14:19:53.261Z","comments":true,"path":"2020/11/06/Vue/vue中使用H5的audio/","link":"","permalink":"http://yoursite.com/2020/11/06/Vue/vue%E4%B8%AD%E4%BD%BF%E7%94%A8H5%E7%9A%84audio/","excerpt":"","text":"vue中使用H5的audioH5audio标签有许多事件 在应用到vue中后的使用如下： 比如在使用onplay时，要去掉on，用@play派发时间，在methods中定义方法执行体 1234567891011121314151617181920212223&lt;template&gt; &lt;div&gt; &lt;audio src&#x3D;&quot;..&#x2F;..&#x2F;static&#x2F;1.mp3&quot; @play&#x3D;&quot;ready&quot; @pause&#x3D;&quot;pause&quot; controls&gt;&lt;&#x2F;audio&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt; &lt;script&gt; export default &#123; name: &#39;musci&#39;, data() &#123; return &#123; &#125; &#125;, methods:&#123; ready()&#123; console.log(&quot;play click&quot;); &#125;, pause()&#123; console.log(&quot;pause click&quot;); &#125; &#125; &#125;&lt;&#x2F;script&gt;","categories":[{"name":"Vue","slug":"Vue","permalink":"http://yoursite.com/categories/Vue/"}],"tags":[]}],"categories":[{"name":"study","slug":"study","permalink":"http://yoursite.com/categories/study/"},{"name":"shopify","slug":"shopify","permalink":"http://yoursite.com/categories/shopify/"},{"name":"Vue","slug":"Vue","permalink":"http://yoursite.com/categories/Vue/"}],"tags":[{"name":"采坑","slug":"采坑","permalink":"http://yoursite.com/tags/%E9%87%87%E5%9D%91/"}]}